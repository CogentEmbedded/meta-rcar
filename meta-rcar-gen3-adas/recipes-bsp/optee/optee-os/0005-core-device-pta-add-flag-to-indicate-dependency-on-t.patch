From bc5921cdab538c8ae48422f5ffd600f1cbdd95b2 Mon Sep 17 00:00:00 2001
From: Maxim Uvarov <maxim.uvarov@linaro.org>
Date: Tue, 5 May 2020 13:28:42 +0100
Subject: [PATCH] core: device pta: add flag to indicate dependency on
 tee-supplicant

Some TAs require tee-supplicant to be run. For example fTPM requires
storage services provided by tee-supplicant. When scanning and
probe() devices on tee bus we can initialize early drivers which
do not require tee-supplicant and after mount fs and tee-supplicant
run do probe() drivers witch require tee-supplicant.

Signed-off-by: Maxim Uvarov <maxim.uvarov@linaro.org>
Suggested-by: Sumit Garg <sumit.garg@linaro.org>
Reviewed-by: Sumit Garg <sumit.garg@linaro.org>
Reviewed-by: Jerome Forissier <jerome@forissier.org>
Reviewed-by: Jens Wiklander <jens.wiklander@linaro.org>
---
 core/pta/device.c                    | 24 ++++++++++++++++++------
 lib/libutee/include/pta_device.h     |  3 ++-
 lib/libutee/include/user_ta_header.h | 11 +++++++++--
 3 files changed, 29 insertions(+), 9 deletions(-)

diff --git a/core/pta/device.c b/core/pta/device.c
index 051c7bf..a030e85 100644
--- a/core/pta/device.c
+++ b/core/pta/device.c
@@ -21,9 +21,15 @@
 #define PTA_NAME "device.pta"
 
 static void add_ta(uint32_t flags, const TEE_UUID *uuid, uint8_t *buf,
-		   uint32_t blen, uint32_t *pos)
+		   uint32_t blen, uint32_t *pos, uint32_t rflags)
 {
-	if (flags & TA_FLAG_DEVICE_ENUM) {
+	if ((flags & TA_FLAG_DEVICE_ENUM) &&
+	    (flags & TA_FLAG_DEVICE_ENUM_SUPP)) {
+		EMSG(PTA_NAME ": skipping TA %pUl, inconsistent flags", uuid);
+		return;
+	}
+
+	if (flags & rflags) {
 		if (*pos + sizeof(*uuid) <= blen)
 			tee_uuid_to_octets(buf + *pos, uuid);
 
@@ -32,7 +38,8 @@ static void add_ta(uint32_t flags, const TEE_UUID *uuid, uint8_t *buf,
 }
 
 static TEE_Result get_devices(uint32_t types,
-			      TEE_Param params[TEE_NUM_PARAMS])
+			      TEE_Param params[TEE_NUM_PARAMS],
+			      uint32_t rflags)
 {
 	const struct pseudo_ta_head *ta = NULL;
 	const struct early_ta *eta = NULL;
@@ -53,11 +60,12 @@ static TEE_Result get_devices(uint32_t types,
 	blen = params[0].memref.size;
 
 	SCATTERED_ARRAY_FOREACH(ta, pseudo_tas, struct pseudo_ta_head)
-		add_ta(ta->flags, &ta->uuid, buf, blen, &pos);
+		add_ta(ta->flags, &ta->uuid, buf, blen, &pos, rflags);
 
 	if (IS_ENABLED(CFG_EARLY_TA))
 		for_each_early_ta(eta)
-			add_ta(eta->flags, &eta->uuid, buf, blen, &pos);
+			add_ta(eta->flags, &eta->uuid, buf, blen, &pos,
+			       rflags);
 
 	params[0].memref.size = pos;
 	if (pos > blen)
@@ -72,7 +80,11 @@ static TEE_Result invoke_command(void *pSessionContext __unused,
 {
 	switch (nCommandID) {
 	case PTA_CMD_GET_DEVICES:
-		return get_devices(nParamTypes, pParams);
+		return get_devices(nParamTypes, pParams,
+				   TA_FLAG_DEVICE_ENUM);
+	case PTA_CMD_GET_DEVICES_SUPP:
+		return get_devices(nParamTypes, pParams,
+				   TA_FLAG_DEVICE_ENUM_SUPP);
 	default:
 		break;
 	}
diff --git a/lib/libutee/include/pta_device.h b/lib/libutee/include/pta_device.h
index 434e1df..2cd2bcd 100644
--- a/lib/libutee/include/pta_device.h
+++ b/lib/libutee/include/pta_device.h
@@ -23,6 +23,7 @@
  * TEE_ERROR_BAD_PARAMETERS - Incorrect input param
  * TEE_ERROR_SHORT_BUFFER - Output buffer size less than required
  */
-#define PTA_CMD_GET_DEVICES		0x0
+#define PTA_CMD_GET_DEVICES		0x0 /* before tee-supplicant run */
+#define PTA_CMD_GET_DEVICES_SUPP	0x1 /* after tee-supplicant run */
 
 #endif /* __PTA_DEVICE_H */
diff --git a/lib/libutee/include/user_ta_header.h b/lib/libutee/include/user_ta_header.h
index 6f81fd6..9eff3f6 100644
--- a/lib/libutee/include/user_ta_header.h
+++ b/lib/libutee/include/user_ta_header.h
@@ -23,9 +23,16 @@
 	 * (pseudo-TAs only).
 	 */
 #define TA_FLAG_CONCURRENT		(1 << 8)
-#define TA_FLAG_DEVICE_ENUM		(1 << 9) /* device enumeration */
+	/*
+	 * Device enumeration is done in two stages by the normal world, first
+	 * before the tee-supplicant has started and then once more when the
+	 * tee-supplicant is started. The flags below control if the TA should
+	 * be reported in the first or second or case.
+	 */
+#define TA_FLAG_DEVICE_ENUM		(1 << 9)  /* without tee-supplicant */
+#define TA_FLAG_DEVICE_ENUM_SUPP	(1 << 10) /* with tee-supplicant */
 
-#define TA_FLAGS_MASK			GENMASK_32(9, 0)
+#define TA_FLAGS_MASK			GENMASK_32(10, 0)
 
 struct ta_head {
 	TEE_UUID uuid;
-- 
2.7.4

