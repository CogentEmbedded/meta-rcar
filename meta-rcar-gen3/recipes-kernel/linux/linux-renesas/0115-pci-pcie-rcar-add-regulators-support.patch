From d5a3dee65f4ee9d320128bbf79df80d51aec7687 Mon Sep 17 00:00:00 2001
From: Andrey Gusakov <andrey.gusakov@cogentembedded.com>
Date: Mon, 24 Jul 2017 20:22:03 +0300
Subject: [PATCH 1/4] pci: pcie-rcar: add regulators support

Add PCIE regulators

Signed-off-by: Andrey Gusakov <andrey.gusakov@cogentembedded.com>
---
 drivers/pci/host/pcie-rcar.c | 54 ++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 54 insertions(+)

diff --git a/drivers/pci/host/pcie-rcar.c b/drivers/pci/host/pcie-rcar.c
index 8e24d5f88415..6994ea2ac936 100644
--- a/drivers/pci/host/pcie-rcar.c
+++ b/drivers/pci/host/pcie-rcar.c
@@ -14,6 +14,7 @@
 
 #include <linux/clk.h>
 #include <linux/delay.h>
+#include <linux/regulator/consumer.h>
 #include <linux/interrupt.h>
 #include <linux/irq.h>
 #include <linux/irqdomain.h>
@@ -195,6 +196,8 @@ struct rcar_pcie {
 	int			root_bus_nr;
 	struct clk		*clk;
 	struct clk		*bus_clk;
+	struct regulator	*pcie3v3; /* 3.3V power supply */
+	struct regulator	*pcie1v8; /* 1.8V power supply */
 	struct			rcar_msi msi;
 
 	bool			endpoint;
@@ -1673,6 +1676,36 @@ static int rcar_pcie_ep_setup_dma(struct rcar_pcie *pcie)
 		IRQF_SHARED | IRQF_NO_THREAD, "rcar-pcie-ep-dma", pcie);
 }
 
+static int rcar_pcie_set_vpcie(struct rcar_pcie *pcie)
+{
+	struct device *dev = pcie->dev;
+	int err;
+
+	if (!IS_ERR(pcie->pcie3v3)) {
+		err = regulator_enable(pcie->pcie3v3);
+		if (err) {
+			dev_err(dev, "fail to enable vpcie3v3 regulator\n");
+			goto err_out;
+		}
+	}
+
+	if (!IS_ERR(pcie->pcie1v8)) {
+		err = regulator_enable(pcie->pcie1v8);
+		if (err) {
+			dev_err(dev, "fail to enable vpcie1v8 regulator\n");
+			goto err_disable_3v3;
+		}
+	}
+
+	return 0;
+
+err_disable_3v3:
+	if (!IS_ERR(pcie->pcie3v3))
+		regulator_disable(pcie->pcie3v3);
+err_out:
+	return err;
+}
+
 static int rcar_pcie_probe(struct platform_device *pdev)
 {
 	struct rcar_pcie *pcie;
@@ -1692,6 +1725,26 @@ static int rcar_pcie_probe(struct platform_device *pdev)
 	if (pcie->endpoint)
 		dev_info(&pdev->dev, "initializing endpoint mode\n");
 
+	pcie->pcie3v3 = devm_regulator_get_optional(pcie->dev, "pcie3v3");
+	if (IS_ERR(pcie->pcie3v3)) {
+		if (PTR_ERR(pcie->pcie3v3) == -EPROBE_DEFER)
+			return -EPROBE_DEFER;
+		dev_dbg(pcie->dev, "no pcie3v3 regulator found\n");
+	}
+
+	pcie->pcie1v8 = devm_regulator_get_optional(pcie->dev, "pcie1v8");
+	if (IS_ERR(pcie->pcie1v8)) {
+		if (PTR_ERR(pcie->pcie1v8) == -EPROBE_DEFER)
+			return -EPROBE_DEFER;
+		dev_dbg(pcie->dev, "no pcie1v8 regulator found\n");
+	}
+
+	err = rcar_pcie_set_vpcie(pcie);
+	if (err) {
+		dev_err(pcie->dev, "failed to set pcie regulators\n");
+		goto err_set_pcie;
+	}
+
 	INIT_LIST_HEAD(&pcie->resources);
 
 	if (!pcie->endpoint)
@@ -1778,6 +1831,7 @@ err_pm_disable:
 	if (!pcie->endpoint)
 		rcar_pcie_release_of_pci_ranges(pcie);
 
+err_set_pcie:
 	return err;
 }
 
-- 
2.13.0
