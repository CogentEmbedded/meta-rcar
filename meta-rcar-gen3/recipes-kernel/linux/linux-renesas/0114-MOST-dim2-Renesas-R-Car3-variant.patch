From d595053486568b5be30fda582becf9240d171c66 Mon Sep 17 00:00:00 2001
From: Andrey Gusakov <andrey.gusakov@cogentembedded.com>
Date: Mon, 10 Jul 2017 16:16:25 +0300
Subject: [PATCH 114/114] MOST: dim2: Renesas R-Car3 variant

Signed-off-by: Andrey Gusakov <andrey.gusakov@cogentembedded.com>
---
 drivers/staging/most/hdm-dim2/dim2_hal.c | 53 +++++++++++++++++++++-----------
 drivers/staging/most/hdm-dim2/dim2_hal.h |  7 ++++-
 drivers/staging/most/hdm-dim2/dim2_hdm.c | 11 ++++++-
 drivers/staging/most/hdm-dim2/dim2_reg.h | 18 +++++------
 4 files changed, 60 insertions(+), 29 deletions(-)

diff --git a/drivers/staging/most/hdm-dim2/dim2_hal.c b/drivers/staging/most/hdm-dim2/dim2_hal.c
index 3c524506ee22..aeccea2ee495 100644
--- a/drivers/staging/most/hdm-dim2/dim2_hal.c
+++ b/drivers/staging/most/hdm-dim2/dim2_hal.c
@@ -23,13 +23,14 @@
  * The number of frames per sub-buffer for synchronous channels.
  * Allowed values: 1, 2, 4, 8, 16, 32, 64.
  */
-#define FRAMES_PER_SUBBUFF 16
+#define FRAMES_PER_SUBBUFF_IMX   16
+#define FRAMES_PER_SUBBUFF_RCAR3 8
 
 /*
  * Size factor for synchronous DBR buffer.
  * Minimal value is 4*FRAMES_PER_SUBBUFF.
  */
-#define SYNC_DBR_FACTOR (4u * (u16)FRAMES_PER_SUBBUFF)
+#define SYNC_DBR_FACTOR(x) (4u * (u16)x)
 
 /*
  * Size factor for isochronous DBR buffer.
@@ -64,9 +65,6 @@
 /* -------------------------------------------------------------------------- */
 /* generic helper functions and macros */
 
-#define MLBC0_FCNT_VAL_MACRO(n) MLBC0_FCNT_VAL_ ## n ## FPSB
-#define MLBC0_FCNT_VAL(fpsb) MLBC0_FCNT_VAL_MACRO(fpsb)
-
 static inline u32 bit_mask(u8 position)
 {
 	return (u32)1 << position;
@@ -86,6 +84,8 @@ struct lld_global_vars_t {
 	bool mcm_is_initialized;
 	struct dim2_regs __iomem *dim2; /* DIM2 core base address */
 	u32 dbr_map[DBR_MAP_SIZE];
+	int variant;
+	int frames_per_subbuff;
 };
 
 static struct lld_global_vars_t g = { false };
@@ -398,7 +398,8 @@ static inline bool check_packet_length(u32 packet_length)
 
 static inline bool check_bytes_per_frame(u32 bytes_per_frame)
 {
-	u16 const max_size = ((u16)CDT3_BD_MASK + 1u) / SYNC_DBR_FACTOR;
+	u16 const max_size = ((u16)CDT3_BD_MASK + 1u) /
+		SYNC_DBR_FACTOR(g.frames_per_subbuff);
 
 	if (bytes_per_frame <= 0)
 		return false; /* too small */
@@ -439,7 +440,7 @@ static inline u16 norm_sync_buffer_size(u16 buf_size, u16 bytes_per_frame)
 {
 	u16 n;
 	u16 const max_size = (u16)ADT1_ISOC_SYNC_BD_MASK + 1u;
-	u32 const unit = bytes_per_frame * (u16)FRAMES_PER_SUBBUFF;
+	u32 const unit = bytes_per_frame * g.frames_per_subbuff;
 
 	if (buf_size > max_size)
 		buf_size = max_size;
@@ -464,27 +465,36 @@ static void dim2_cleanup(void)
 
 	/* clear status for all dma channels */
 	dimcb_io_write(&g.dim2->ACSR0, 0xFFFFFFFF);
-	dimcb_io_write(&g.dim2->ACSR1, 0xFFFFFFFF);
+	if (g.variant != DIM_RCAR3)
+		dimcb_io_write(&g.dim2->ACSR1, 0xFFFFFFFF);
 
 	/* mask interrupts for all channels */
 	dimcb_io_write(&g.dim2->ACMR0, 0);
-	dimcb_io_write(&g.dim2->ACMR1, 0);
+	if (g.variant != DIM_RCAR3)
+		dimcb_io_write(&g.dim2->ACMR1, 0);
 }
 
 static void dim2_initialize(bool enable_6pin, u8 mlb_clock)
 {
+	u32 value;
+
 	dim2_cleanup();
 
 	/* configure and enable MediaLB */
-	dimcb_io_write(&g.dim2->MLBC0,
-		       enable_6pin << MLBC0_MLBPEN_BIT |
-		       mlb_clock << MLBC0_MLBCLK_SHIFT |
-		       MLBC0_FCNT_VAL(FRAMES_PER_SUBBUFF) << MLBC0_FCNT_SHIFT |
-		       true << MLBC0_MLBEN_BIT);
+	value = enable_6pin << MLBC0_MLBPEN_BIT |
+		mlb_clock << MLBC0_MLBCLK_SHIFT |
+		true << MLBC0_MLBEN_BIT;
+
+	if (g.variant == DIM_RCAR3)
+		value |= MLBC0_FCNT_VAL_8FPSB << MLBC0_FCNT_SHIFT;
+	else
+		value |= MLBC0_FCNT_VAL_16FPSB << MLBC0_FCNT_SHIFT;
+	dimcb_io_write(&g.dim2->MLBC0, value);
 
 	/* activate all HBI channels */
 	dimcb_io_write(&g.dim2->HCMR0, 0xFFFFFFFF);
-	dimcb_io_write(&g.dim2->HCMR1, 0xFFFFFFFF);
+	if (g.variant != DIM_RCAR3)
+		dimcb_io_write(&g.dim2->HCMR1, 0xFFFFFFFF);
 
 	/* enable HBI */
 	dimcb_io_write(&g.dim2->HCTL, bit_mask(HCTL_EN_BIT));
@@ -650,7 +660,7 @@ static bool channel_detach_buffers(struct dim_channel *ch, u16 buffers_number)
 /* -------------------------------------------------------------------------- */
 /* API */
 
-u8 dim_startup(struct dim2_regs __iomem *dim_base_address, u32 mlb_clock)
+u8 dim_startup(struct dim2_regs __iomem *dim_base_address, u32 mlb_clock, int variant)
 {
 	g.dim_is_initialized = false;
 
@@ -663,6 +673,12 @@ u8 dim_startup(struct dim2_regs __iomem *dim_base_address, u32 mlb_clock)
 		return DIM_INIT_ERR_MLB_CLOCK;
 
 	g.dim2 = dim_base_address;
+	g.variant = variant;
+	if (variant == DIM_RCAR3)
+		g.frames_per_subbuff = FRAMES_PER_SUBBUFF_IMX;
+	else
+		g.frames_per_subbuff = FRAMES_PER_SUBBUFF_RCAR3;
+
 	g.dbr_map[0] = 0;
 	g.dbr_map[1] = 0;
 
@@ -790,7 +806,7 @@ u8 dim_init_sync(struct dim_channel *ch, u8 is_tx, u16 ch_address,
 	if (!check_bytes_per_frame(bytes_per_frame))
 		return DIM_ERR_BAD_CONFIG;
 
-	ch->dbr_size = bytes_per_frame * SYNC_DBR_FACTOR;
+	ch->dbr_size = bytes_per_frame * SYNC_DBR_FACTOR(g.frames_per_subbuff);
 	ch->dbr_addr = alloc_dbr(ch->dbr_size);
 	if (ch->dbr_addr >= DBR_SIZE)
 		return DIM_INIT_ERR_OUT_OF_MEMORY;
@@ -851,7 +867,8 @@ void dim_service_irq(struct dim_channel *const *channels)
 
 	/* clear pending Interrupts */
 	dimcb_io_write(&g.dim2->MS0, 0);
-	dimcb_io_write(&g.dim2->MS1, 0);
+	if (g.variant != DIM_RCAR3)
+		dimcb_io_write(&g.dim2->MS1, 0);
 }
 
 u8 dim_service_channel(struct dim_channel *ch)
diff --git a/drivers/staging/most/hdm-dim2/dim2_hal.h b/drivers/staging/most/hdm-dim2/dim2_hal.h
index 1c924e869de7..ed354d6d61d7 100644
--- a/drivers/staging/most/hdm-dim2/dim2_hal.h
+++ b/drivers/staging/most/hdm-dim2/dim2_hal.h
@@ -33,6 +33,11 @@ enum mlb_clk_speed {
 	CLK_8192FS = 7,
 };
 
+enum dim_variant {
+	DIM_IMX = 0,
+	DIM_RCAR3 = 1,
+};
+
 struct dim_ch_state_t {
 	bool ready; /* Shows readiness to enqueue next buffer */
 	u16 done_buffers; /* Number of completed buffers */
@@ -60,7 +65,7 @@ struct dim_channel {
 	u16 done_sw_buffers_number; /*< Done software buffers number. */
 };
 
-u8 dim_startup(struct dim2_regs __iomem *dim_base_address, u32 mlb_clock);
+u8 dim_startup(struct dim2_regs __iomem *dim_base_address, u32 mlb_clock, int variant);
 
 void dim_shutdown(void);
 
diff --git a/drivers/staging/most/hdm-dim2/dim2_hdm.c b/drivers/staging/most/hdm-dim2/dim2_hdm.c
index 81edf4f4beb3..ab274a8dffd4 100644
--- a/drivers/staging/most/hdm-dim2/dim2_hdm.c
+++ b/drivers/staging/most/hdm-dim2/dim2_hdm.c
@@ -107,6 +107,7 @@ struct dim2_hdm {
 	unsigned int mlb_irq;
 	struct clk *clk;
 	int clk_speed;
+	int variant;
 	struct task_struct *netinfo_task;
 	wait_queue_head_t netinfo_waitq;
 	int deliver_netinfo;
@@ -242,7 +243,7 @@ static int startup_dim(struct platform_device *pdev)
 		dim_rcar_init(dev);
 	}
 
-	hal_ret = dim_startup(dev->io_base, dev->clk_speed);
+	hal_ret = dim_startup(dev->io_base, dev->clk_speed, dev->variant);
 	if (hal_ret != DIM_NO_ERROR) {
 		pr_err("dim_startup failed: %d\n", hal_ret);
 		if (pdata && pdata->destroy)
@@ -759,6 +760,7 @@ static int poison_channel(struct most_interface *most_iface, int ch_idx)
  * Register the dim2 interface with mostcore and initialize it.
  * Return 0 on success, negative on failure.
  */
+
 static int dim2_probe(struct platform_device *pdev)
 {
 	struct dim2_hdm *dev;
@@ -853,11 +855,18 @@ static int dim2_probe(struct platform_device *pdev)
 	dev->most_iface.poison_channel = poison_channel;
 	dev->most_iface.request_netinfo = request_netinfo;
 	dev->most_iface.dev = &pdev->dev;
+	dev->variant = DIM_IMX;
 
 	if (np) {
 		const char *tmp;
+
+		/* set speed */
 		if (!of_property_read_string(np, "clock-speed", &tmp))
 			dev->clk_speed = dim_parce_speed(tmp);
+
+		/* set variant */
+		/* currently only renesas supported through device tree */
+		dev->variant = DIM_RCAR3;
 	}
 
 	kobj = most_register_interface(&dev->most_iface);
diff --git a/drivers/staging/most/hdm-dim2/dim2_reg.h b/drivers/staging/most/hdm-dim2/dim2_reg.h
index e0837b6b9ae1..e24e187d12b3 100644
--- a/drivers/staging/most/hdm-dim2/dim2_reg.h
+++ b/drivers/staging/most/hdm-dim2/dim2_reg.h
@@ -20,28 +20,28 @@
 struct dim2_regs {
 	/* 0x00 */ u32 MLBC0;
 	/* 0x01 */ u32 rsvd0[1];
-	/* 0x02 */ u32 MLBPC0;
+	/* 0x02 */ u32 MLBPC0;	/* no at R-Car3 */
 	/* 0x03 */ u32 MS0;
 	/* 0x04 */ u32 rsvd1[1];
-	/* 0x05 */ u32 MS1;
+	/* 0x05 */ u32 MS1;	/* no at R-Car3 */
 	/* 0x06 */ u32 rsvd2[2];
 	/* 0x08 */ u32 MSS;
 	/* 0x09 */ u32 MSD;
 	/* 0x0A */ u32 rsvd3[1];
 	/* 0x0B */ u32 MIEN;
 	/* 0x0C */ u32 rsvd4[1];
-	/* 0x0D */ u32 MLBPC2;
-	/* 0x0E */ u32 MLBPC1;
+	/* 0x0D */ u32 MLBPC2;	/* no at R-Car3 */
+	/* 0x0E */ u32 MLBPC1;	/* no at R-Car3 */
 	/* 0x0F */ u32 MLBC1;
 	/* 0x10 */ u32 rsvd5[0x10];
 	/* 0x20 */ u32 HCTL;
 	/* 0x21 */ u32 rsvd6[1];
 	/* 0x22 */ u32 HCMR0;
-	/* 0x23 */ u32 HCMR1;
+	/* 0x23 */ u32 HCMR1;	/* no at R-Car3 */
 	/* 0x24 */ u32 HCER0;
-	/* 0x25 */ u32 HCER1;
+	/* 0x25 */ u32 HCER1;	/* no at R-Car3 */
 	/* 0x26 */ u32 HCBR0;
-	/* 0x27 */ u32 HCBR1;
+	/* 0x27 */ u32 HCBR1;	/* no at R-Car3 */
 	/* 0x28 */ u32 rsvd7[8];
 	/* 0x30 */ u32 MDAT0;
 	/* 0x31 */ u32 MDAT1;
@@ -57,9 +57,9 @@ struct dim2_regs {
 	/* 0xF0 */ u32 ACTL;
 	/* 0xF1 */ u32 rsvd9[3];
 	/* 0xF4 */ u32 ACSR0;
-	/* 0xF5 */ u32 ACSR1;
+	/* 0xF5 */ u32 ACSR1;	/* no at R-Car3 */
 	/* 0xF6 */ u32 ACMR0;
-	/* 0xF7 */ u32 ACMR1;
+	/* 0xF7 */ u32 ACMR1;	/* no at R-Car3 */
 };
 
 #define DIM2_MASK(n)  (~((~(u32)0) << (n)))
-- 
2.13.0

